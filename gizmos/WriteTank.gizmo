#! /Applications/Nuke6.3v4/Nuke6.3v4.app/Contents/MacOS/Nuke6.3v4 -nx
version 6.3

##########################################################################################
##########################################################################################
#
# addUserKnob syntax
# ------------------
# <id> - this is the id of the knob type to add.  A full list can be found here:
#     http://docs.thefoundry.co.uk/nuke/63/ndkdevguide/knobs-and-handles/knobtypes.html
#
# <name> - name of the knob used when querying it in nuke, e.g. node.knob("<name>")
#
# l "" - Label to be used for the knob in the property editor
#
# t "" - tooltip to be displayed for this knob in the property editor
#
# T "" - this is the value to set for the knob - different knobs use this in different ways
#
# M {} - for enumeration knobs, this is the list of enumerations
#
# Additional knob flags
# ---------------------
# These are set/removed by doing +/-FLAG_NAME, e.g. +STARTLINE to ensure the knob starts a
# new line in the property editor.A full list of flags can be found here:
# http://docs.thefoundry.co.uk/nuke/63/ndkdevguide/knobs-and-handles/knobflags.html
#
##########################################################################################
##########################################################################################

Gizmo {
 note_font Verdana
 mapsize {0.15 0.15}
 addUserKnob {
    20 tank_tab 
    l "Shotgun Write"
 }
 addUserKnob {
    1 precomp_render_template
    l "Sgtk Precomp Template" 
    t "The Sgtk precomp template associated with this node"
    +INVISIBLE 
 }
 addUserKnob {
    1 element_render_template
    l "Sgtk Elements Template" 
    t "The Sgtk elements template associated with this node"
    +INVISIBLE 
 }
 addUserKnob {
    1 denoise_render_template
    l "Sgtk Denoise Template" 
    t "The Sgtk denoise template associated with this node"
    +INVISIBLE 
 }
 addUserKnob {
    1 cleanup_render_template
    l "Sgtk Cleanup Template" 
    t "The Sgtk cleanup template associated with this node"
    +INVISIBLE 
 }
 addUserKnob {
    1 final_render_template
    l "Sgtk Final Template" 
    t "The Sgtk Final template associated with this node"
    +INVISIBLE 
 }
 addUserKnob {
    1 test_render_template
    l "Sgtk Test Template" 
    t "The Sgtk test template associated with this node"
    +INVISIBLE 
 }
 addUserKnob {
    6 tk_is_fully_constructed 
    l "Is Fully Constructed" 
    t "Internal - Gets set to True in 'onCreate'.  All 'knobChanged' calls before this are ignored" 
    +DO_NOT_WRITE 
    +STARTLINE
    +INVISIBLE
 }
 addUserKnob {
    1 profile_name 
    l "Profile Name" 
    t "The cached Profile for this node"
    +INVISIBLE
 }
 addUserKnob {
    1 render_template 
    l "Sgtk Render Template" 
    t "The Sgtk render template associated with this node"
    +INVISIBLE 
 }
 addUserKnob {
    1 publish_template 
    l "Sgtk Publish Template" 
    t "The Sgtk publish template associated with this node"
    +INVISIBLE 
 }
 addUserKnob {
    1 cached_path 
    l "Sgtk Cached Path" 
    t "The path for this write node"
    +INVISIBLE 
 }
 addUserKnob {
    1 proxy_render_template 
    l "Sgtk Proxy Render Template" 
    t "The Sgtk render template associated with this node when rendering in proxy mode"
    +INVISIBLE 
 }
 addUserKnob {
    1 proxy_publish_template 
    l "Sgtk Proxy Publish Template" 
    t "The Sgtk publish template associated with this node for proxy renders"
    +INVISIBLE 
 }
 addUserKnob {
    1 tk_cached_proxy_path 
    l "Sgtk Cached Proxy Path" 
    t "The path for this write node when rendering in proxy mode"
    +INVISIBLE 
 }
 addUserKnob {
    1 tk_last_known_script
    l "Last Known Script"
    t "The last known script this Write node was saved in - used to determine if the script is being saved as a new file or not"
    +INVISIBLE
 }
 addUserKnob {
    1 tk_file_type
    l "File Type"
    t "The file type to be used for the write node output - this cached value is used if the profile can't be determined"
    +INVISIBLE
 }
 addUserKnob {
    1 tk_file_type_settings
    l "File Type Settings"
    t "A dictionary of file type settings to be applied to the Write node - this cached value is used if the profile can't be determined"
    +INVISIBLE
 }
 addUserKnob {
    1 tk_write_node_settings
    l "Write Node Settings"
    t "A string of tcl containing a record of settings for the internal write node at save time."
    +INVISIBLE
 }
 addUserKnob {
    26 "" 
    l "" 
    +STARTLINE
 }
 addUserKnob {
    26 tk_render_mode 
    l "  " 
    T "<i style='color:gold'>[Proxy Mode]<i>" 
    t ""
 }
 addUserKnob {
    26 path_context 
    l "Context" 
    T "   " 
    t "A preview of the file location generated by the node."
 }
 addUserKnob {
    26 path_local 
    l "Local Path" 
    T "   " 
    t "A preview of the file location generated by the node."
 }
 addUserKnob {
    26 path_filename 
    l "File Name" 
    T "   " 
    t "A preview of the file location generated by the node."
 }
  addUserKnob {
    22 increase_version
    l "+1 version" 
    t "Increases the version number of the given output render." 
    +STARTLINE
    +INVISIBLE    
 }
  addUserKnob {
    22 revert_to_version
    l "revert" 
    t "Reverts to the previous found version number of the given output render." 
    -STARTLINE
    +INVISIBLE    
 }
 addUserKnob {
    26 path_warning 
    l " " 
    T "   " 
    t ""
    +STARTLINE
 }
 addUserKnob {
    26 files_warning 
    l " " 
    T "   " 
    t ""
    +STARTLINE
 }
 addUserKnob {
    22 reset_path 
    l "Reset Path" 
    T "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_reset_render_path_gizmo_callback()" 
    +STARTLINE
 }
 addUserKnob {
    22 show_in_fs 
    l "Jump to File System" 
    T "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_show_in_fs_gizmo_callback()" 
    t "Opens a file system browser and navigates to the folder where the renders are written to." 
    +STARTLINE
 }
 addUserKnob {
    22 tk_copy_path 
    l "Copy Path" 
    T "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_copy_path_to_clipboard_gizmo_callback(False)" 
    t "Copies the current render/proxy path to the clipboard" 
    -STARTLINE
 }
 addUserKnob {
    22 tk_copy_path_win 
    l "Copy Path - Windows" 
    T "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_copy_path_to_clipboard_gizmo_callback(True)" 
    t "Copies the current render/proxy path to the clipboard" 
    -STARTLINE
 }
 addUserKnob {
    26 "" 
    l "" 
    +STARTLINE
 }
 addUserKnob {
    4 write_type 
    l "SG Write Type" 
    t "Select the type of node you require this to be." 
    M {Version Precomp Element Denoise Cleanup Test}
 }
 addUserKnob {
   22 write_type_info 
   l "Info"
   T "  "
 }
 addUserKnob {
    1 write_type_cache
    l "SG Write Type Cache" 
    t "The cached Write Type for this node"
    +INVISIBLE
 }
 addUserKnob {
    1 write_name_cache
    l "SG Write Name Cache" 
    t "The cached Write Name for this node"
    +INVISIBLE
 } 
 addUserKnob {
    1 write_version_latest
    l "SG Write Version number Cache" 
    t "The cached Write Name for this node"
    +INVISIBLE
 }  
 addUserKnob {
   25 ""
   - STARTLINE
 }
 addUserKnob {
    4 tk_profile_list 
    l "Profile" 
    M {} 
    t "Select the Profile to use for this node"
    -STARTLINE 
    +DO_NOT_WRITE
 }
 addUserKnob {
    1 tank_channel 
    l "Detail" 
    t "Choose an output name for this Write Node to help identify it when you have more than one output in your scene." 
    +STARTLINE
    -INVISIBLE
 }
 addUserKnob {
    6 project_crop_bool
    l "Crop to Project delivery format" 
    t "Choose to crop footage to the Project format." 
    +STARTLINE
    -INVISIBLE
 } 
 addUserKnob {
    6 shot_ocio_bool
    l "Apply shot OCIO" 
    t "Choose to apply the embeded shot OCIO." 
    +STARTLINE
    -INVISIBLE
 }  
  addUserKnob {
    4 exr_datatype 
    l "dataype" 
    t "Choose EXR datatype" 
    M {"16 bit half" "32 bit float"}    
    +STARTLINE
    -INVISIBLE
 }  
 addUserKnob {
    6 auto_crop 
    l "autocrop" 
    t "Choose to crop footage to the Project format." 
    +STARTLINE
    -INVISIBLE
 }  
 addUserKnob {
    4 dpx_datatype 
    l "dataype" 
    t "Choose DPX datatype" 
    M {"8 bit" "10 bit" "12 bit" "16 bit"}    
    +STARTLINE
    -INVISIBLE
 }   
 addUserKnob {
   25 ""
   - STARTLINE
 } 
 addUserKnob {
    1 tank_channel_cache
    l "" 
    t "Cache location for user entered text to change the output naming for write nodes" 
    +STARTLINE
    +INVISIBLE
 }
 addUserKnob {
    6 tk_use_name_as_channel 
    l "Use node name" 
    t "Use the node name in place of the output name" 
    -STARTLINE
    +INVISIBLE
 }
 addUserKnob {
    26 version_divider
    l "" 
    +STARTLINE
    -INVISIBLE
 }
 addUserKnob {
   25 ""
   - STARTLINE
 }
 addUserKnob {
    41 channels 
    T Write1.channels
 }
 addUserKnob {
    41 frame_mode 
    l frame 
    T Write1.frame_mode
 }
 addUserKnob {
    41 frame 
    l "" 
    T Write1.frame
    -STARTLINE    
 }
 addUserKnob {
    41 colorspace 
    T Write1.colorspace
 }
 addUserKnob {
    41 raw 
    l "raw data" 
    T Write1.raw
    -STARTLINE 
 }
 addUserKnob {
    41 premultiplied 
    T Write1.premultiplied
    -STARTLINE 
 }
 addUserKnob {
    41 views 
    T Write1.views
 }
 addUserKnob {
    26 "" 
    l "" 
    +STARTLINE
 }
 addUserKnob {
    26 tk_render_warning 
    l " " 
    T "<i style='color:orange'>Warning<i>" 
    t ""
    +STARTLINE
 }
 addUserKnob {
    41 render_order 
    l "render order" 
    T Write1.render_order
 }
 addUserKnob {
    41 Render 
    l "Local Render"
    T Write1.Render
    -STARTLINE    
 }
 addUserKnob {
    41 first 
    l "frame range" 
    T Write1.first
 }
 addUserKnob {
    41 last 
    l "" 
    T Write1.last
    -STARTLINE
 }
 addUserKnob {
    41 use_limit
    l "limit to range" 
    T Write1.use_limit
    -STARTLINE
 }
 addUserKnob {
    41 reading 
    l "read file" 
    T Write1.reading
 }
 addUserKnob {
    41 checkHashOnRead 
    l "" 
    T Write1.checkHashOnRead
    +INVISIBLE
 }
 addUserKnob {
    41 on_error 
    l "missing frames" 
    T Write1.on_error
 }
 addUserKnob {
    41 reload 
    l Reload 
    T Write1.reload
    -STARTLINE
 }
 addUserKnob {
    41 _promoted_0
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_1
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_2
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_3
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_4
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_5
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_6
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_7
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_8
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_9
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_10
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_11
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_12
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_13
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_14
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_15
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_16
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_17
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_18
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    41 _promoted_19
    l Promoted
    +INVISIBLE
 }
 addUserKnob {
    20 Python
    l "Python"
 }
 addUserKnob {1 tk_before_render l "before render"}
 addUserKnob {41 beforeFrameRender l "before each frame" T Write1.beforeFrameRender}
 addUserKnob {41 afterFrameRender l "after each frame" T Write1.afterFrameRender}
 addUserKnob {1 tk_after_render l "after render"}
 addUserKnob {41 renderProgress l "render progress" T Write1.renderProgress}

 knobChanged "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_knob_changed_gizmo_callback()"
 onCreate "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    func = nuke._shotgun_write_node_handler.on_node_created_gizmo_callback()\n    func.next()\n    func.send(func)\n" 
}
 Input {
  inputs 0
  name Input1
  xpos 195
  ypos -74
 }
Reformat {
  type "to format"
  box_width 800
  box_height 1
  black_outside false
  pbb true  
  name project_reformat
  disable true    
 }
 Crop {
  name project_crop
  preset format
  reformat true
  crop false  
  disable true  
 } 
 AddTimeCode {
  startcode 01:00:00:01
  name project_tc
  metafps False
  fps 23.98
  useFrame True
  frame 1
 }
 OCIOColorSpace {
  name shot_ocio
  disable true
 } 
 ModifyMetaData {
  name content_meta_data
 } 
 Write {
  file  "\[python __import__('nuke')._shotgun_write_node_handler.on_compute_path_gizmo_callback() if hasattr(__import__('nuke'), '_shotgun_write_node_handler') else nuke.thisParent().knob('cached_path').value()]"
  proxy "\[python __import__('nuke')._shotgun_write_node_handler.on_compute_proxy_path_gizmo_callback() if hasattr(__import__('nuke'), '_shotgun_write_node_handler') else nuke.thisParent().knob('tk_cached_proxy_path').value()]"
  beforeRender "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_before_render_gizmo_callback()"
  afterRender "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_after_render_gizmo_callback()"
  name Write1
  create_directories True
  xpos 195
  ypos 65
 }
set N11879e50 [stack 0]
 Output {
  name Output1
  xpos 195
  ypos 150
 }
push $N11879e50
 Reformat {
  type "to box"
  box_width 800
  box_height 1
  black_outside true
  name Reformat1
  xpos 249
  ypos 16
 }
 Write {
  file_type png
  name create_thumbnail
  xpos 362
  ypos 27
  disable true
 }
end_group
